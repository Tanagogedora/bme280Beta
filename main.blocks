<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="p7@;)SJ,(fWKDsu-fcix" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="oXiU7DBFI]/dZgead`ES"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum BME280_I2C_ADDRESS {" line1="    //% block=&quot;0x76&quot;" line2="    ADDR_0x76 = 0x76," line3="    //% block=&quot;0x77&quot;" line4="    ADDR_0x77 = 0x77" line5="}" numlines="6"></mutation><next><block type="typescript_statement" id="@uq8.Jj?_jJU3*_`lY9C"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum BME280_T {" line1="    //% block=&quot;C&quot;" line2="    T_C = 0," line3="    //% block=&quot;F&quot;" line4="    T_F = 1" line5="}" numlines="6"></mutation><next><block type="typescript_statement" id="QZdP[:%uS%L9f[,63.Hs"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum BME280_P {" line1="    //% block=&quot;Pa&quot;" line2="    Pa = 0," line3="    //% block=&quot;hPa&quot;" line4="    hPa = 1" line5="}" numlines="6"></mutation><next><block type="typescript_statement" id=":ui5LP_A(o(s!/YXe:P6"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace BME280 {" line1="    let BME280_I2C_ADDR = BME280_I2C_ADDRESS.ADDR_0x76" line2="" line3="    function setreg(reg: number, dat: number): void {" line4="        let buf = pins.createBuffer(2);" line5="        buf[0] = reg;" line6="        buf[1] = dat;" line7="        pins.i2cWriteBuffer(BME280_I2C_ADDR, buf);" line8="    }" line9="" line10="    function getreg(reg: number): number {" line11="        pins.i2cWriteNumber(BME280_I2C_ADDR, reg, NumberFormat.UInt8BE);" line12="        return pins.i2cReadNumber(BME280_I2C_ADDR, NumberFormat.UInt8BE);" line13="    }" line14="" line15="    function getInt8LE(reg: number): number {" line16="        pins.i2cWriteNumber(BME280_I2C_ADDR, reg, NumberFormat.UInt8BE);" line17="        return pins.i2cReadNumber(BME280_I2C_ADDR, NumberFormat.Int8LE);" line18="    }" line19="" line20="    function getUInt16LE(reg: number): number {" line21="        pins.i2cWriteNumber(BME280_I2C_ADDR, reg, NumberFormat.UInt8BE);" line22="        return pins.i2cReadNumber(BME280_I2C_ADDR, NumberFormat.UInt16LE);" line23="    }" line24="" line25="    function getInt16LE(reg: number): number {" line26="        pins.i2cWriteNumber(BME280_I2C_ADDR, reg, NumberFormat.UInt8BE);" line27="        return pins.i2cReadNumber(BME280_I2C_ADDR, NumberFormat.Int16LE);" line28="    }" line29="" line30="    let dig_T1 = getUInt16LE(0x88)" line31="    let dig_T2 = getInt16LE(0x8A)" line32="    let dig_T3 = getInt16LE(0x8C)" line33="    let dig_P1 = getUInt16LE(0x8E)" line34="    let dig_P2 = getInt16LE(0x90)" line35="    let dig_P3 = getInt16LE(0x92)" line36="    let dig_P4 = getInt16LE(0x94)" line37="    let dig_P5 = getInt16LE(0x96)" line38="    let dig_P6 = getInt16LE(0x98)" line39="    let dig_P7 = getInt16LE(0x9A)" line40="    let dig_P8 = getInt16LE(0x9C)" line41="    let dig_P9 = getInt16LE(0x9E)" line42="    let dig_H1 = getreg(0xA1)" line43="    let dig_H2 = getInt16LE(0xE1)" line44="    let dig_H3 = getreg(0xE3)" line45="    let a = getreg(0xE5)" line46="    let dig_H4 = (getreg(0xE4) &lt;&lt; 4) + (a % 16)" line47="    let dig_H5 = (getreg(0xE6) &lt;&lt; 4) + (a &gt;&gt; 4)" line48="    let dig_H6 = getInt8LE(0xE7)" line49="    setreg(0xF2, 0x04)" line50="    setreg(0xF4, 0x2F)" line51="    setreg(0xF5, 0x0C)" line52="    let T = 0" line53="    let P = 0" line54="    let H = 0" line55="" line56="    function get(): void {" line57="        let adc_T = (getreg(0xFA) &lt;&lt; 12) + (getreg(0xFB) &lt;&lt; 4) + (getreg(0xFC) &gt;&gt; 4)" line58="        let var1 = (((adc_T &gt;&gt; 3) - (dig_T1 &lt;&lt; 1)) * dig_T2) &gt;&gt; 11" line59="        let var2 = (((((adc_T &gt;&gt; 4) - dig_T1) * ((adc_T &gt;&gt; 4) - dig_T1)) &gt;&gt; 12) * dig_T3) &gt;&gt; 14" line60="        let t = var1 + var2" line61="        T = ((t * 5 + 128) &gt;&gt; 8) / 100  // 小数点以下を含む温度" line62="        var1 = (t &gt;&gt; 1) - 64000" line63="        var2 = (((var1 &gt;&gt; 2) * (var1 &gt;&gt; 2)) &gt;&gt; 11) * dig_P6" line64="        var2 = var2 + ((var1 * dig_P5) &lt;&lt; 1)" line65="        var2 = (var2 &gt;&gt; 2) + (dig_P4 &lt;&lt; 16)" line66="        var1 = (((dig_P3 * ((var1 &gt;&gt; 2) * (var1 &gt;&gt; 2)) &gt;&gt; 13) &gt;&gt; 3) + (((dig_P2) * var1) &gt;&gt; 1)) &gt;&gt; 18" line67="        var1 = ((32768 + var1) * dig_P1) &gt;&gt; 15" line68="        if (var1 == 0)" line69="            return; // avoid exception caused by division by zero" line70="        let adc_P = (getreg(0xF7) &lt;&lt; 12) + (getreg(0xF8) &lt;&lt; 4) + (getreg(0xF9) &gt;&gt; 4)" line71="        let _p = ((1048576 - adc_P) - (var2 &gt;&gt; 12)) * 3125" line72="        _p = Math.idiv(_p, var1) * 2;" line73="        var1 = (dig_P9 * (((_p &gt;&gt; 3) * (_p &gt;&gt; 3)) &gt;&gt; 13)) &gt;&gt; 12" line74="        var2 = (((_p &gt;&gt; 2)) * dig_P8) &gt;&gt; 13" line75="        P = _p + ((var1 + var2 + dig_P7) &gt;&gt; 4)" line76="        let adc_H = (getreg(0xFD) &lt;&lt; 8) + getreg(0xFE)" line77="        var1 = t - 76800" line78="        var2 = (((adc_H &lt;&lt; 14) - (dig_H4 &lt;&lt; 20) - (dig_H5 * var1)) + 16384) &gt;&gt; 15" line79="        var1 = var2 * (((((((var1 * dig_H6) &gt;&gt; 10) * (((var1 * dig_H3) &gt;&gt; 11) + 32768)) &gt;&gt; 10) + 2097152) * dig_H2 + 8192) &gt;&gt; 14)" line80="        var2 = var1 - (((((var1 &gt;&gt; 15) * (var1 &gt;&gt; 15)) &gt;&gt; 7) * dig_H1) &gt;&gt; 4)" line81="        if (var2 &lt; 0) var2 = 0" line82="        if (var2 &gt; 419430400) var2 = 419430400" line83="        H = (var2 &gt;&gt; 12) &gt;&gt; 10" line84="    }" line85="" line86="    /**" line87="     * get pressure" line88="     */" line89="    //% blockId=&quot;BME280_GET_PRESSURE&quot; block=&quot;pressure %u&quot;" line90="    //% weight=80 blockGap=8" line91="    export function pressure(u: BME280_P): number {" line92="        get();" line93="        if (u == BME280_P.Pa) return P;" line94="        else return Math.idiv(P, 100)" line95="    }" line96="" line97="    /**" line98="     * get temperature" line99="     */" line100="    //% blockId=&quot;BME280_GET_TEMPERATURE&quot; block=&quot;temperature %u&quot;" line101="    //% weight=80 blockGap=8" line102="    export function temperature(u: BME280_T): number {" line103="        get();" line104="        if (u == BME280_T.T_C) return T;" line105="        else return 32 + Math.idiv(T * 9, 5)" line106="    }" line107="" line108="    /**" line109="     * get humidity" line110="     */" line111="    //% blockId=&quot;BME280_GET_HUMIDITY&quot; block=&quot;humidity&quot;" line112="    //% weight=80 blockGap=8" line113="    export function humidity(): number {" line114="        get();" line115="        return H;" line116="    }" line117="" line118="    /**" line119="     * power on" line120="     */" line121="    //% blockId=&quot;BME280_POWER_ON&quot; block=&quot;Power On&quot;" line122="    //% weight=22 blockGap=8" line123="    export function PowerOn() {" line124="        setreg(0xF4, 0x2F)" line125="    }" line126="" line127="    /**" line128="     * power off" line129="     */" line130="    //% blockId=&quot;BME280_POWER_OFF&quot; block=&quot;Power Off&quot;" line131="    //% weight=21 blockGap=8" line132="    export function PowerOff() {" line133="        setreg(0xF4, 0)" line134="    }" line135="" line136="    /**" line137="     * Calculate Dewpoint" line138="     */" line139="    //% block=&quot;Dewpoint&quot;" line140="    //% weight=60 blockGap=8" line141="    export function Dewpoint(): number {" line142="        get();" line143="        return T - Math.idiv(100 - H, 5)" line144="    }" line145="" line146="    /**" line147="     * Pressure below Event" line148="     */" line149="    //% block=&quot;Pressure below than %dat&quot; dat.defl=100000" line150="    export function PressureBelowThan(dat: number, body: () =&gt; void): void {" line151="        control.inBackground(function () {" line152="            while (true) {" line153="                get()" line154="                if (P &lt; dat) {" line155="                    body()" line156="                }" line157="                basic.pause(1000)" line158="            }" line159="        })" line160="    }" line161="" line162="    /**" line163="     * Pressure higher Event" line164="     */" line165="    //% block=&quot;Pressure higher than %dat&quot; dat.defl=100000" line166="    export function PressureHigherThan(dat: number, body: () =&gt; void): void {" line167="        control.inBackground(function () {" line168="            while (true) {" line169="                get()" line170="                if (P &gt; dat) {" line171="                    body()" line172="                }" line173="                basic.pause(1000)" line174="            }" line175="        })" line176="    }" line177="" line178="    /**" line179="     * humidity below Event" line180="     */" line181="    //% block=&quot;Humidity below than %dat&quot; dat.defl=10" line182="    export function HumidityBelowThan(dat: number, body: () =&gt; void): void {" line183="        control.inBackground(function () {" line184="            while (true) {" line185="                get()" line186="                if (H &lt; dat) {" line187="                    body()" line188="                }" line189="                basic.pause(1000)" line190="            }" line191="        })" line192="    }" line193="" line194="    /**" line195="     * humidity higher Event" line196="     */" line197="    //% block=&quot;Humidity higher than %dat&quot; dat.defl=50" line198="    export function HumidityHigherThan(dat: number, body: () =&gt; void): void {" line199="        control.inBackground(function () {" line200="            while (true) {" line201="                get()" line202="                if (H &gt; dat) {" line203="                    body()" line204="                }" line205="                basic.pause(1000)" line206="            }" line207="        })" line208="    }" line209="" line210="    /**" line211="     * temperature below Event" line212="     */" line213="    //% block=&quot;Temperature below than %dat&quot; dat.defl=10" line214="    export function TemperatureBelowThan(dat: number, body: () =&gt; void): void {" line215="        control.inBackground(function () {" line216="            while (true) {" line217="                get()" line218="                if (T &lt; dat) {" line219="                    body()" line220="                }" line221="                basic.pause(1000)" line222="            }" line223="        })" line224="    }" line225="" line226="    /**" line227="     * temperature higher Event" line228="     */" line229="    //% block=&quot;Temperature higher than %dat&quot; dat.defl=30" line230="    export function TemperatureHigherThan(dat: number, body: () =&gt; void): void {" line231="        control.inBackground(function () {" line232="            while (true) {" line233="                get()" line234="                if (T &gt; dat) {" line235="                    body()" line236="                }" line237="                basic.pause(1000)" line238="            }" line239="        })" line240="    }" line241="" line242="    /**" line243="     * set I2C address" line244="     */" line245="    //% blockId=&quot;BME280_SET_ADDRESS&quot; block=&quot;set address %addr&quot;" line246="    //% weight=20 blockGap=8" line247="    export function Address(addr: BME280_I2C_ADDRESS) {" line248="        BME280_I2C_ADDR = addr" line249="    }" line250="}" numlines="251"></mutation></block></next></block></next></block></next></block></statement></block></xml>